{"version":3,"sources":["Components/expansionPermut.js","Components/permut_4.js","Components/leftSidePart.js","Components/rightSidePart.js","Components/left_LShiftpermut.js","Components/LeftShifter.js","Components/right_LShiftpermut.js","Components/permutateKey_10.js","Components/permutateKey_8_Key.js","Components/findKeys.js","Components/XOR_Operation.js","Components/inputForm.js","Components/initialPermut_8.js","Components/breaking_PT_into_TwoParts.js","Components/joining_TwoArrays.js","Components/initialPermut_1.js","App.js","serviceWorker.js","index.js"],"names":["ExpansionPermut","rightpermut","permut","console","log","Permut_4","right_new_s1","p4","LeftSidePart","value","mid","leftpermut","i","length","RightSidePart","j","left_LShiftpermut","temp","LeftShifter","Left_LShiftpermut","Right_LShiftpermut","PermutateKey_10","keyVal","PermutateKey_8_Key","FindKey2","key2","permutateKey_8","PermutateKey_8_Key1","document","getElementById","textContent","join","XOR_Operation","exp_permut","s","parseInt","forPlainText","plaintext","key1","_128bits","step1_ip","ip_plaintext","InitialPermut_8","Breaking_PT_into_TwoParts","step5","step6","left_new_s0","step7","step8","step11","step12","step13","step14","step14_L","step14_R","step15","step16","step17","left","right","Joining_TwoArrays","step18","InitialPermut_1","InputForm","counter1","counter2","onSubmit","e","preventDefault","FindKey1","alert","className","type","placeholder","onChange","event","target","toString","split","style","color","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd4de6c1.chunk.js","sourcesContent":["export default function ExpansionPermut(rightpermut) {\r\n    let permut = [8]\r\n    // rightside pass into EP as 4 1 2 3 2 3 4 1\r\n    // but the index of array will start from 0\r\n    // so therfore 3 0 1 2 1 2 3 0\r\n    console.log(\"rightpermut: \", rightpermut);\r\n\r\n    permut[0] = rightpermut[3];\r\n    permut[1] = rightpermut[0];\r\n    permut[2] = rightpermut[1];\r\n    permut[3] = rightpermut[2];\r\n    permut[4] = rightpermut[1];\r\n    permut[5] = rightpermut[2];\r\n    permut[6] = rightpermut[3];\r\n    permut[7] = rightpermut[0];\r\n\r\n    \r\n  console.log(\"ExpansionPermut\", permut);\r\n    return permut;\r\n }","\r\n\r\nexport default function Permut_4  (right_new_s1) {\r\n    let p4 = [];\r\n    p4[0] = right_new_s1[1];\r\n    p4[1] = right_new_s1[3];\r\n    p4[2] = right_new_s1[2];\r\n    p4[3] = right_new_s1[0];\r\n  \r\n    return p4;\r\n  }","export default function LeftSidePart(value, mid) {\r\n    let leftpermut = [];\r\n    for (let i = 0; i < (value.length) / 2; i++) {\r\n      leftpermut[i] = value[i];\r\n    }\r\n    console.log(\"leftpermut\", leftpermut);\r\n    return leftpermut\r\n  }","export default function RightSidePart(value, mid) {\r\n    let rightpermut = [];\r\n    let j = 0\r\n    for (let i = mid; i < value.length; i++) {\r\n      rightpermut[j] = value[i];\r\n      j++;\r\n    }\r\n    console.log(\"rightpermut\", rightpermut);\r\n\r\n    return rightpermut\r\n  }","export default function left_LShiftpermut(leftpermut) {\r\n\r\n    let temp = leftpermut[0]\r\n    console.log(temp);\r\n  \r\n    for (let i = 0; i < leftpermut.length; i++) {\r\n  \r\n      if (i === leftpermut.length - 1) {\r\n        leftpermut[i] = temp;\r\n      }\r\n      else {\r\n        leftpermut[i] = leftpermut[i + 1]\r\n      }\r\n    }\r\n    console.log(leftpermut);\r\n    return leftpermut;\r\n  }","\r\nimport Right_LShiftpermut from './right_LShiftpermut'\r\nimport Left_LShiftpermut from './left_LShiftpermut'\r\n\r\nexport default function LeftShifter(value) {\r\n    let mid = value.length / 2;\r\n  \r\n    let leftpermut = [], rightpermut = [];\r\n    for (let i = 0; i < (value.length) / 2; i++) {\r\n      leftpermut[i] = value[i];\r\n    }\r\n    {\r\n      let j = 0\r\n      for (let i = mid; i < value.length; i++) {\r\n        rightpermut[j] = value[i];\r\n        j++;\r\n      }\r\n    }\r\n  \r\n    leftpermut = Left_LShiftpermut(leftpermut)    // left Shift for LHS\r\n    rightpermut = Right_LShiftpermut(rightpermut, mid)    // left Shift for RHS\r\n  \r\n    {\r\n      let j = 0;\r\n      for (let i = 0; i < value.length; i++) {\r\n        if (i < mid) {\r\n          value[i] = leftpermut[i];\r\n        }\r\n        else if (i > mid - 1) {\r\n          value[i] = rightpermut[j];\r\n          j++;\r\n        }\r\n      }\r\n    }\r\n    console.log(value);\r\n    return (\r\n      value\r\n    )\r\n  }","export default function Right_LShiftpermut(rightpermut, mid) {\r\n    let temp = rightpermut[0]\r\n    for (let i = 0; i < rightpermut.length; i++) {\r\n  \r\n      if (i === mid - 1) {\r\n        rightpermut[i] = temp;\r\n      }\r\n      else {\r\n        rightpermut[i] = rightpermut[i + 1]\r\n      }\r\n    }\r\n    console.log(rightpermut);\r\n    return rightpermut;\r\n  }","\r\nimport LeftShifter from './LeftShifter'\r\nconst PermutateKey_10 = (keyVal) => {\r\n\r\n    let permut = []\r\n  \r\n    // According to condition [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]\r\n  \r\n    // but here index will start with 0\r\n  \r\n    permut[0] = keyVal[2];\r\n    permut[1] = keyVal[4];\r\n    permut[2] = keyVal[1];\r\n    permut[3] = keyVal[6];\r\n    permut[4] = keyVal[3];\r\n    permut[5] = keyVal[9];\r\n    permut[6] = keyVal[0];\r\n    permut[7] = keyVal[8];\r\n    permut[8] = keyVal[7];\r\n    permut[9] = keyVal[5];\r\n  \r\n    keyVal = LeftShifter(permut, keyVal)\r\n    return keyVal;\r\n  }\r\nexport default PermutateKey_10","const PermutateKey_8_Key = (keyVal) => {\r\n    let permut = [8]\r\n\r\n    // According to condition [6 3 7 4 8 5 10 9]\r\n    // but here index will start with 0\r\n\r\n    permut[0] = keyVal[5];\r\n    permut[1] = keyVal[2];\r\n    permut[2] = keyVal[6];\r\n    permut[3] = keyVal[3];\r\n    permut[4] = keyVal[7];\r\n    permut[5] = keyVal[4];\r\n    permut[6] = keyVal[9];\r\n    permut[7] = keyVal[8];\r\n    console.log(\"permut: \", permut);\r\n    return  permut\r\n\r\n}\r\nexport default PermutateKey_8_Key","import PermutateKey_8_Key1 from './permutateKey_8_Key'\r\nimport LeftShifter from './LeftShifter'\r\n\r\nfunction permutateKey_8(keyVal, key2) {\r\n  LeftShifter(keyVal, null);\r\n  key2 = LeftShifter(keyVal, null);\r\n  return key2\r\n}\r\nexport default function FindKey1(keyVal) {\r\n    let key1\r\n    key1 = PermutateKey_8_Key1(keyVal);\r\n    document.getElementById(\"lblkey2\").textContent = `Key1 after P8 is : ` + (key1.join(\" \"))\r\n    return key1\r\n  }\r\nexport function FindKey2(keyVal) {\r\n    let key2\r\n    keyVal = permutateKey_8(keyVal);\r\n    key2 = PermutateKey_8_Key1(keyVal);\r\n    document.getElementById(\"lblkey3\").textContent = `Key2 after 2 LS is : ` + (key2.join(\" \"))\r\n  \r\n    return key2\r\n  }","export default function XOR_Operation(exp_permut, value) {\r\n    let s = []\r\n    console.log(\"exp_permut, value:\", exp_permut, value);\r\n    for (let i = 0; i < exp_permut.length; i++) {\r\n      if (exp_permut[i] == parseInt(value[i])) {\r\n        console.log(\"exp_permut, value:\", exp_permut[i], value[i]);\r\n        s[i] = 0;\r\n        console.log(\"s[i]:\", s[i]);\r\n      }\r\n      else {\r\n        console.log(\"exp_permut, value:\", exp_permut[i], value[i]);\r\n        s[i] = 1;\r\n        console.log(\"s[i]:\", s[i]);\r\n      }\r\n    }\r\n    console.log(\"s:\", s);\r\n    return s;\r\n  }","import React from 'react'\r\nimport ExpansionPermut from './expansionPermut'\r\nimport Permut_4 from './permut_4'\r\nimport LeftSidePart from './leftSidePart'\r\nimport RightSidePart from './rightSidePart'\r\nimport Left_LShiftpermut from './left_LShiftpermut'\r\nimport PermutateKey_10 from './permutateKey_10'\r\nimport FindKey1, {FindKey2} from './findKeys'\r\nimport Breaking_PT_into_TwoParts from './breaking_PT_into_TwoParts'\r\nimport XOR_Operation from './XOR_Operation'\r\nimport Joining_TwoArrays from './joining_TwoArrays'\r\nimport InitialPermut_8 from './initialPermut_8'\r\nimport InitialPermut_1 from './initialPermut_1'\r\n\r\nfunction forPlainText(plaintext, key1, key2) {\r\n  let _128bits = [1, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n  let step1_ip = InitialPermut_8(plaintext); //step1\r\n  let exp_permut = Breaking_PT_into_TwoParts(step1_ip); // step 2 and step3\r\n  let s = XOR_Operation(exp_permut[2], key1)    // step4\r\n  // let s0 = LeftSidePart(s, 4);\r\n  // let s1 = RightSidePart(s, 4);\r\n  \r\n  //#region Step 5:\r\n  const step5 = XOR_Operation(s, _128bits);  //Step 5: Take the output of XOR and again XOR with the binary of 128.\r\n  console.log(\"step5\", step5);\r\n  // above _128bits contains 1 0 0 0 0 0 0 0\r\n  //#endregion\r\n\r\n  //#region Step 6: Apply Circular Left shift by 1 on Output of XOR\r\n  let step6 = Left_LShiftpermut(step5)\r\n  let left_new_s0 = LeftSidePart(step6, 4);\r\n  let right_new_s1 = RightSidePart(step6, 4);\r\n  //#endregion\r\n  console.log(\"left_new_s0, right_new_s1\", left_new_s0, right_new_s1)\r\n  \r\n  //#region Step 7: Take the right side value and put it into P.4 Table. P 4\r\n  let step7 = Permut_4(right_new_s1); //Step 7\r\n  console.log(\"step7, exp_permut[0]\", step7, exp_permut[0])\r\n  //#endregion\r\n\r\n  //#region Step 8: Take the output and XOR it with the value of left side in Step 2\r\n\r\n  let step8 = XOR_Operation(step7, exp_permut[0])\r\n  // here above exp_permut[0] is left 4-bits of step 2\r\n  //#endregion\r\n\r\n  // console.log(exp_permut[1]);\r\n\r\n  //#region step11 Now take the step8 value and put it into E.P table.\r\n  let step11 = ExpansionPermut(step8);\r\n\r\n  //#endregion\r\n\r\n  //#region Step 12: Take the output and apply XOR with Key2.\r\n  let step12 = XOR_Operation(step11, key2);\r\n  //#endregion \r\n\r\n  //#region Step 13: Take the output of XOR and again XOR with the binary of 128.\r\n  let step13 = XOR_Operation(step12, _128bits);\r\n  //#endregion \r\n\r\n  //#region Step 14: Apply Circular Left shift by 1 on Output of XOR\r\n    let step14 = Left_LShiftpermut(step13);\r\n    let step14_L = LeftSidePart(step14, 4);\r\n    let step14_R = RightSidePart(step14, 4);\r\n  //  step14=step14.slice(0,2)\r\n  //#endregion \r\n  console.log(step14_R,  step14_L);\r\n\r\n  //#region Step 15: Take the right side value and put it it into P.4\r\n  let step15 = Permut_4(step14_R);\r\n  //#endregion\r\n\r\n  //#region Step 16: Take the output and XOR it with the value of left side in Step 10.\r\n  let step16 = XOR_Operation(step15, exp_permut[1]);\r\n  //#endregion\r\n\r\n  //#region Step 17: Now take the Output of XOR as Left Side value and take the Right Side value in Step 10.\r\n    let step17 = Joining_TwoArrays(step16, step8, 4);\r\n  //#endregion\r\n  \r\n  //#region Step 18: Now take the value and put it into IP-1 table.\r\n  let step18 = InitialPermut_1(step17);\r\n  //#endregion\r\n\r\n  document.getElementById(\"lblCipherText\").textContent = `Cipher text is : ` + step18.join(\" \")\r\n  document.getElementById(\"lblPlainText1\").textContent = `Result after Step1 is : ` + step1_ip.join(\" \")\r\n  document.getElementById(\"lblPlainText2\").textContent = `Result after Step2 is : ` + exp_permut[0].join(\" \") + \"  \" + exp_permut[1].join(\" \") \r\n  document.getElementById(\"lblPlainText3\").textContent = `Result after Step3 is : ` + exp_permut[2].join(\" \")\r\n  document.getElementById(\"lblPlainText4\").textContent = `Result after Step4 is : ` + s.join(\" \")\r\n  document.getElementById(\"lblPlainText5\").textContent = `Result after Step5 is : ` + step5.join(\" \")\r\n  document.getElementById(\"lblPlainText6\").textContent = `Result after Step6 is : ` + step6.join(\" \")\r\n  document.getElementById(\"lblPlainText7\").textContent = `Result after Step7 is : ` + step7.join(\" \");\r\n  document.getElementById(\"lblPlainText8\").textContent = `Result after Step8 is : ` + step8.join(\" \")\r\n  document.getElementById(\"lblPlainText9\").textContent = `Result after Step11 is : ` + step11.join(\" \")\r\n  document.getElementById(\"lblPlainText10\").textContent = `Result after Step12 is : ` + step12.join(\" \")\r\n  document.getElementById(\"lblPlainText11\").textContent = `Result after Step13 is : ` + step13.join(\" \")\r\n  document.getElementById(\"lblPlainText12\").textContent = `Result after Step14 is : ` + step14.join(\" \")\r\n  document.getElementById(\"lblPlainText13\").textContent = `Result after Step15 is : ` + step15.join(\" \")\r\n  document.getElementById(\"lblPlainText14\").textContent = `Result after Step16 is : ` + step16.join(\" \")\r\n  document.getElementById(\"lblPlainText15\").textContent = `Result after Step17 is : ` + step17.join(\" \")\r\n  document.getElementById(\"lblPlainText16\").textContent = `Result after Step18 is : ` + step18.join(\" \")\r\n\r\n  // after getting result in XOR_Operation we do again XOR with 128bits\r\n\r\n}\r\nconst InputForm = () => {\r\n  let counter1 = 0, counter2 = 0;\r\n  let keyVal, plaintext\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    if (counter1 === 8 && counter2 === 10) {\r\n      \r\n      keyVal = PermutateKey_10(keyVal);\r\n  \r\n      document.getElementById(\"lblkey1\").textContent = `Key after P10 is : ` + keyVal.join(\" \")\r\n\r\n      let key1 = FindKey1(keyVal);\r\n      let key2 = FindKey2(keyVal);\r\n\r\n      console.log(\"key1 : \", key1);\r\n      console.log(\"key2 : \", key2);\r\n\r\n      forPlainText(plaintext, key1, key2);\r\n    }\r\n    else {\r\n      alert(\"please enter valid length bits of both plain text and key\")\r\n    }\r\n  }\r\n  const changeHandler1 = (event) => {\r\n    plaintext = event.target.value;\r\n    counter1 = plaintext.length;\r\n    plaintext = plaintext.toString().split(\"\")\r\n    console.log(plaintext);\r\n    if (counter1 !== 8) {\r\n      document.getElementById(\"lblCount1\").style.color = \"red\";\r\n    }\r\n    else {\r\n      document.getElementById(\"lblCount1\").style.color = \"green\";\r\n    }\r\n    document.getElementById(\"lblCount1\").textContent = counter1;\r\n  }\r\n  const changeHandler2 = (event) => {\r\n    keyVal = event.target.value;\r\n    counter2 = keyVal.length;\r\n    keyVal = keyVal.toString().split(\"\")\r\n    if (counter2 !== 10) {\r\n      document.getElementById(\"lblCount2\").style.color = \"red\";\r\n    }\r\n    else {\r\n      document.getElementById(\"lblCount2\").style.color = \"green\";\r\n    }\r\n    document.getElementById(\"lblCount2\").textContent = counter2;\r\n  }\r\n  return (\r\n    <>\r\n      <h1> Block Cipher Technique </h1>\r\n      <b> Please enter binary numbers only e.g: (0 or 1) </b>\r\n    <form onSubmit={submit}>\r\n      <input className=\"inpText\" type=\"number\" placeholder=\" Enter 8-bits Platin Text ...\" onChange={changeHandler1} />\r\n      <label id=\"lblCount1\"></label>\r\n      <br />\r\n      <input className=\"inpText\" type=\"number\" placeholder=\" Enter 10-bits Key\" onChange={changeHandler2} />\r\n      <label id=\"lblCount2\"></label>\r\n      <br />\r\n\r\n      <input className=\"inpBtn\" type=\"submit\" />\r\n      </form>\r\n      <br />\r\n      <label id=\"lblCipherText\"></label><br />\r\n      <label id=\"lblkey1\"></label><br />\r\n      <label id=\"lblkey2\"></label><br />\r\n      <label id=\"lblkey3\"></label><br />\r\n      <br />\r\n\r\n      <label id=\"lblPlainText1\"></label><br />\r\n      <label id=\"lblPlainText2\"></label><br />\r\n      <label id=\"lblPlainText3\"></label><br />\r\n      <label id=\"lblPlainText4\"></label><br />\r\n      <label id=\"lblPlainText5\"></label><br />\r\n      <label id=\"lblPlainText6\"></label><br />\r\n      <label id=\"lblPlainText7\"></label><br />\r\n      <label id=\"lblPlainText8\"></label><br />\r\n      <label id=\"lblPlainText9\"></label><br />\r\n      <label id=\"lblPlainText10\"></label><br />\r\n      <label id=\"lblPlainText11\"></label><br />\r\n      <label id=\"lblPlainText12\"></label><br />\r\n      <label id=\"lblPlainText13\"></label><br />\r\n      <label id=\"lblPlainText14\"></label><br />\r\n      <label id=\"lblPlainText15\"></label><br />\r\n      <label id=\"lblPlainText16\"></label><br />\r\n      <label id=\"lblCipherText\"></label><br />\r\n      \r\n      \r\n    </>\r\n\r\n  );\r\n}\r\nexport default InputForm\r\n","export default function InitialPermut_8(ip_plaintext) {\r\n    let permut = [8]\r\n    permut[0] = ip_plaintext[1];\r\n    permut[1] = ip_plaintext[5];\r\n    permut[2] = ip_plaintext[2];\r\n    permut[3] = ip_plaintext[0];\r\n    permut[4] = ip_plaintext[3];\r\n    permut[5] = ip_plaintext[7];\r\n    permut[6] = ip_plaintext[4];\r\n    permut[7] = ip_plaintext[6];\r\n  \r\n    return permut\r\n  }","\r\nimport LeftSidePart from './leftSidePart'\r\nimport RightSidePart from './rightSidePart'\r\nimport ExpansionPermut from './expansionPermut'\r\n\r\nexport default function Breaking_PT_into_TwoParts(value) {\r\n    let mid = value.length / 2;\r\n    let leftpermut = LeftSidePart(value, mid);\r\n    let rightpermut = RightSidePart(value, mid)\r\n    let exp_permut = ExpansionPermut(rightpermut) // step3\r\n    return [leftpermut, rightpermut, exp_permut];\r\n  }","export default function Joining_TwoArrays(left, right, mid){\r\n    let value = [];\r\n    console.log(\"left\", left);\r\n    console.log(\"right\", right);\r\n    console.log(\"mid\", mid);\r\n      let j = 0;\r\n      for (let i = 0; i < (parseInt(mid)*2); i++) {\r\n        if (i < mid) {\r\n          value[i] = left[i];\r\n          console.log(\"left[i]\", left[i]);\r\n          console.log(\"value[i]]\", value[i]);\r\n        }\r\n        else if (i > mid - 1) {\r\n  \r\n          value[i] = right[j];\r\n          console.log(\"right[i]\", right[i]);\r\n          console.log(\"value[i]]\", value[i]);\r\n          j++;\r\n        }\r\n      }\r\n    return value\r\n  }","export default function InitialPermut_1(ip_plaintext) {\r\n    //IP_1 table is:   4 1 3 5 7 2 8 6\r\n    let permut = [8]\r\n    permut[0] = ip_plaintext[3];\r\n    permut[1] = ip_plaintext[0];\r\n    permut[2] = ip_plaintext[2];\r\n    permut[3] = ip_plaintext[4];\r\n    permut[4] = ip_plaintext[6];\r\n    permut[5] = ip_plaintext[1];\r\n    permut[6] = ip_plaintext[7];\r\n    permut[7] = ip_plaintext[5];\r\n  \r\n    return permut\r\n  }","import React from 'react';\nimport InputForm from './Components/inputForm';\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <InputForm />\n        <div className=\"Footer\">\n          <div className=\"updatedsoon\">Updated Soon</div>\n          <hr />\n          <h3>\n            Assignment Created By:\n        </h3>\n          <ul>\n            <li>\n              1. Muhammad Arsalan 2018-CS-203\n          </li>\n            <li>\n              2. Rumail Ansari 2018-CS-280\n          </li>\n            <li>\n              3. Waqas Ahmed 2018-CS-231\n          </li>\n          </ul>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}