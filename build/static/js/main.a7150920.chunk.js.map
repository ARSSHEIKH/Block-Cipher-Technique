{"version":3,"sources":["inputForm.js","App.js","serviceWorker.js","index.js"],"names":["LeftShifter","value","mid","length","leftpermut","rightpermut","i","j","temp","leftShiftpermut","rightShiftpermut","permutateKey_8_Key1","keyVal","permut","findKey2","key2","permutateKey_8","document","getElementById","textContent","join","leftSidePart","rightSidePart","breaking_PT_into_TwoParts","console","log","expansionPermut","forPlainText","plaintext","key1","ip_plaintext","exp_permut","s","XOR_Operation","s0","s1","initialPermut","InputForm","counter1","counter2","className","type","placeholder","onChange","event","target","toString","split","style","color","id","onClick","e","permutateKey_10","findKey1","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7150920.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n// import SubmitForm.js from './SubmitForm.js'\r\n\r\nconst permutateKey_10 = (keyVal) => {\r\n\r\n  let permut = []\r\n\r\n  // According to condition [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]\r\n\r\n  // but here index will start with 0\r\n\r\n  permut[0] = keyVal[2];\r\n  permut[1] = keyVal[4];\r\n  permut[2] = keyVal[1];\r\n  permut[3] = keyVal[6];\r\n  permut[4] = keyVal[3];\r\n  permut[5] = keyVal[9];\r\n  permut[6] = keyVal[0];\r\n  permut[7] = keyVal[8];\r\n  permut[8] = keyVal[7];\r\n  permut[9] = keyVal[5];\r\n\r\n  keyVal = LeftShifter(permut, keyVal)\r\n  return keyVal;\r\n}\r\n\r\nfunction LeftShifter(value) {\r\n  let mid = value.length / 2;\r\n\r\n  let leftpermut = [], rightpermut = [];\r\n  for (let i = 0; i < (value.length) / 2; i++) {\r\n    leftpermut[i] = value[i];\r\n  }\r\n\r\n\r\n  {\r\n    let j = 0\r\n    for (let i = mid; i < value.length; i++) {\r\n      rightpermut[j] = value[i];\r\n      j++;\r\n    }\r\n\r\n  }\r\n\r\n  leftpermut = leftShiftpermut(leftpermut, mid)    // left Shift for LHS\r\n  rightpermut = rightShiftpermut(rightpermut, mid)    // left Shift for RHS\r\n\r\n  {\r\n    let j = 0;\r\n    for (let i = 0; i < value.length; i++) {\r\n      if (i < 4 + 1) {\r\n        value[i] = leftpermut[i];\r\n      }\r\n      else if (i > 4) {\r\n\r\n        value[i] = rightpermut[j];\r\n\r\n        j++;\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    value\r\n  )\r\n}\r\nfunction rightShiftpermut(rightpermut, mid) {\r\n\r\n  let temp = rightpermut[0]\r\n  for (let i = 0; i < rightpermut.length; i++) {\r\n\r\n    if (i == mid - 1) {\r\n      rightpermut[i] = temp;\r\n    }\r\n    else {\r\n      rightpermut[i] = rightpermut[i + 1]\r\n    }\r\n  }\r\n  return rightpermut;\r\n}\r\nfunction leftShiftpermut(leftpermut, mid) {\r\n  let temp = leftpermut[0]\r\n  for (let i = 0; i < leftpermut.length; i++) {\r\n\r\n    if (i == mid - 1) {\r\n      leftpermut[i] = temp;\r\n    }\r\n    else {\r\n      leftpermut[i] = leftpermut[i + 1]\r\n    }\r\n  }\r\n  return leftpermut;\r\n}\r\n\r\n// permuatation8 for orignal Key\r\nfunction permutateKey_8_Key1(keyVal) {\r\n  let permut = [8]\r\n\r\n  // According to condition [6 3 7 4 8 5 10 9]\r\n  // but here index will start with 0\r\n\r\n  permut[0] = keyVal[5];\r\n  permut[1] = keyVal[2];\r\n  permut[2] = keyVal[6];\r\n  permut[3] = keyVal[3];\r\n  permut[4] = keyVal[7];\r\n  permut[5] = keyVal[4];\r\n  permut[6] = keyVal[9];\r\n  permut[7] = keyVal[8];\r\n\r\n  return permut\r\n}\r\nfunction permutateKey_8(keyVal, key2) {\r\n  LeftShifter(keyVal, null);\r\n  key2 = LeftShifter(keyVal, null);\r\n  return key2\r\n}\r\nfunction findKey1(keyVal) {\r\n  let key1\r\n  key1 = permutateKey_8_Key1(keyVal);\r\n  document.getElementById(\"lblkey2\").textContent = `Key1 after P8 is : ` + (key1.join(\" \"))\r\n  return key1\r\n\r\n}\r\nfunction findKey2(keyVal) {\r\n  let key2\r\n  keyVal = permutateKey_8(keyVal);\r\n  key2 = permutateKey_8_Key1(keyVal);\r\n  document.getElementById(\"lblkey3\").textContent = `Key2 after 2 LS is : ` + (key2.join(\" \"))\r\n\r\n  return key2\r\n\r\n}\r\nfunction leftSidePart(value, mid) {\r\n  let leftpermut = [];\r\n  for (let i = 0; i < (value.length) / 2; i++) {\r\n    leftpermut[i] = value[i];\r\n  }\r\n  return leftpermut\r\n}\r\nfunction rightSidePart(value, mid) {\r\n  let rightpermut = [];\r\n  let j = 0\r\n  for (let i = mid; i < value.length; i++) {\r\n    rightpermut[j] = value[i];\r\n    j++;\r\n  }\r\n  return rightpermut\r\n}\r\nfunction breaking_PT_into_TwoParts(value) {\r\n  let mid = value.length / 2;\r\n\r\n  leftSidePart(value, mid);\r\n  let rightpermut = rightSidePart(value, mid)\r\n\r\n\r\n  let exp_permut = expansionPermut(rightpermut)\r\n  return exp_permut;\r\n\r\n}\r\nfunction expansionPermut(rightpermut) {\r\n  let permut = [8]\r\n  // rightside pass into EP as 4 1 2 3 2 3 4 1\r\n  // but the index of array will start from 0\r\n  // so therfore 3 0 1 2 1 2 3 0\r\n  permut[0] = rightpermut[3];\r\n  permut[1] = rightpermut[0];\r\n  permut[2] = rightpermut[1];\r\n  permut[3] = rightpermut[2];\r\n  permut[4] = rightpermut[1];\r\n  permut[5] = rightpermut[2];\r\n  permut[6] = rightpermut[3];\r\n  permut[7] = rightpermut[0];\r\n  console.log(\"permut: \", permut);\r\n\r\n  return permut;\r\n\r\n}\r\nfunction XOR_Operation(exp_permut, key1) {\r\n  let s = []\r\n  for (let i = 0; i < 8; i++) {\r\n    if (exp_permut[i] == key1[i]) {\r\n      s[i] = 0;\r\n    }\r\n    else {\r\n      s[i] = 1;\r\n    }\r\n  }\r\n  return s;\r\n  console.log(\"s:\", s);\r\n}\r\n\r\nfunction initialPermut(ip_plaintext, key1) {\r\n  let permut = [8]\r\n  permut[0] = ip_plaintext[1];\r\n  permut[1] = ip_plaintext[5];\r\n  permut[2] = ip_plaintext[2];\r\n  permut[3] = ip_plaintext[0];\r\n  permut[4] = ip_plaintext[3];\r\n  permut[5] = ip_plaintext[7];\r\n  permut[6] = ip_plaintext[4];\r\n  permut[7] = ip_plaintext[6];\r\n\r\n  let exp_permut = breaking_PT_into_TwoParts(permut);\r\n  let s = XOR_Operation(exp_permut, key1)\r\n  let s0 = leftSidePart(s, 4);\r\n  let s1 = rightSidePart(s, 4);\r\n  console.log(s0);\r\n  console.log(s1);\r\n\r\n  document.getElementById(\"lblPlainText1\").textContent = `PlainText after IP is : ` + permut.join(\" \")\r\n  document.getElementById(\"lblPlainText2\").textContent = `PlainText after EP is : ` + exp_permut.join(\" \")\r\n  document.getElementById(\"lblPlainText3\").textContent = `PlainText after XOR S0 is : ` + s0.join(\" \")\r\n  document.getElementById(\"lblPlainText4\").textContent = `PlainText after XOR S1 is : ` + s1.join(\" \")\r\n}\r\nfunction forPlainText(plaintext, key1) {\r\n\r\n  initialPermut(plaintext, key1);\r\n}\r\nconst InputForm = () => {\r\n  let counter1 = 0, counter2 = 0;\r\n  let keyVal, plaintext\r\n  const submit = (e) => {\r\n    if (counter1 === 8 && counter2 === 10) {\r\n      keyVal = permutateKey_10(keyVal);\r\n      document.getElementById(\"lblkey1\").textContent = `Key after P10 is : ` + keyVal.join(\" \")\r\n\r\n      let key1 = findKey1(keyVal);\r\n      let key2 = findKey2(keyVal);\r\n\r\n      console.log(\"key1 : \", key1);\r\n      console.log(\"key2 : \", key2);\r\n\r\n      forPlainText(plaintext, key1);\r\n    }\r\n    else {\r\n      alert(\"please enter valid length bits of both plain text and key\")\r\n    }\r\n\r\n  }\r\n  const changeHandler1 = (event) => {\r\n    plaintext = event.target.value;\r\n    counter1 = plaintext.length;\r\n    plaintext = plaintext.toString().split(\"\")\r\n    console.log(plaintext);\r\n    if (counter1 != 8) {\r\n      document.getElementById(\"lblCount1\").style.color = \"red\";\r\n    }\r\n    else {\r\n      document.getElementById(\"lblCount1\").style.color = \"green\";\r\n    }\r\n    document.getElementById(\"lblCount1\").textContent = counter1;\r\n  }\r\n  const changeHandler2 = (event) => {\r\n\r\n    keyVal = event.target.value;\r\n    counter2 = keyVal.length;\r\n    keyVal = keyVal.toString().split(\"\")\r\n    if (counter2 != 10) {\r\n      document.getElementById(\"lblCount2\").style.color = \"red\";\r\n    }\r\n    else {\r\n      document.getElementById(\"lblCount2\").style.color = \"green\";\r\n    }\r\n    document.getElementById(\"lblCount2\").textContent = counter2;\r\n  }\r\n\r\n\r\n  let val;\r\n  return (\r\n    <div className=\"\">\r\n      <h1> Block Cipher Technique </h1>\r\n      <input className=\"inpText\" type=\"number\" placeholder=\" Enter 8-bits Platin Text ...\" onChange={changeHandler1} />\r\n      <label id=\"lblCount1\"></label>\r\n      <br />\r\n      <input className=\"inpText\" type=\"number\" placeholder=\" Enter 10-bits Key\" onChange={changeHandler2} />\r\n      <label id=\"lblCount2\"></label>\r\n      <br />\r\n\r\n      <input className=\"inpBtn\" type=\"submit\" onClick={submit} />\r\n      <br />\r\n\r\n      <label id=\"lblkey1\"></label><br />\r\n      <label id=\"lblkey2\"></label><br />\r\n      <label id=\"lblkey3\"></label><br /><br />\r\n\r\n      <label id=\"lblPlainText1\"></label><br />\r\n      <label id=\"lblPlainText2\"></label><br />\r\n      <label id=\"lblPlainText3\"></label><br />\r\n      <label id=\"lblPlainText4\"></label><br />\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default InputForm\r\n","import React from 'react';\nimport InputForm from './inputForm';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InputForm />\n      <div className=\"Footer\">\n      <div className=\"updatedsoon\">Updated Soon</div>\n        <hr/>\n        <h3>\n          Assignment Created By:\n        </h3>\n        \n          <li>\n            1. Muhammad Arsalan 2018-CS-203\n          </li>\n          <li>\n            2. Rumail Ansari 2018-CS-280\n          </li>\n          <li>\n            3. Waqas Ahmed 2018-CS-231\n          </li>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}